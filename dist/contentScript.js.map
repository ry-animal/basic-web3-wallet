{"version":3,"file":"contentScript.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;AACA;AACA;AACA;AACA,0BAA0B,gBAAgB;AAC1C;AACA;AACA,wDAAwD,0BAA0B;AAClF;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA,CAAC;AACS","sources":["webpack://basic-web3-wallet/webpack/bootstrap","webpack://basic-web3-wallet/webpack/runtime/make namespace object","webpack://basic-web3-wallet/./src/contentScript.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Inject Web3 provider\nwindow.addEventListener('load', () => {\n    const provider = {\n        isMetaMask: true,\n        request: async ({ method, params }) => {\n            switch (method) {\n                case 'eth_requestAccounts':\n                    return chrome.runtime.sendMessage({ type: 'REQUEST_ACCOUNTS' });\n                case 'eth_sendTransaction':\n                    return chrome.runtime.sendMessage({\n                        type: 'SIGN_TRANSACTION',\n                        transaction: params[0]\n                    });\n                // Add other RPC methods as needed\n                default:\n                    throw new Error(`Method ${method} not implemented`);\n            }\n        }\n    };\n    window.ethereum = provider;\n});\nexport {};\n"],"names":[],"sourceRoot":""}